using Infrastructure.Interfaces;
using Microsoft.Data.SqlClient;
using System.Collections.Generic;
using System.Data;
using System.Threading.Tasks;
using Dapper;
using Dapper.Contrib.Extensions;

namespace Infrastructure.Services
{
    public class BaseService : IBaseService
    {
        protected readonly SqlConnection _connection;

        public BaseService(SqlConnection connection)
        {
            _connection = connection;
        }

        public async Task<T> GetSingleAsync<T>(string query, object parameters = null, IDbTransaction transaction = null) where T : class
        {
            return await _connection.QueryFirstOrDefaultAsync<T>(query, parameters, transaction);
        }

        public async Task<List<T>> GetDataAsync<T>(string query, object parameters = null, IDbTransaction transaction = null) where T : class
        {
            var result = await _connection.QueryAsync<T>(query, parameters, transaction);
            return result.AsList();
        }

        public async Task<int> SaveSingleAsync<T>(T entity, IDbTransaction transaction = null) where T : class
        {
            return await _connection.InsertAsync(entity, transaction);
        }

        public async Task<int> SaveAsync<T>(List<T> entities, IDbTransaction transaction = null) where T : class
        {
            return await _connection.InsertAsync(entities, transaction);
        }

        public async Task<int> UpdateSingleAsync<T>(T entity, IDbTransaction transaction = null) where T : class
        {
            return await _connection.UpdateAsync(entity, transaction) ? 1 : 0;
        }

        public async Task<int> ExecuteAsync(string query, object parameters = null, IDbTransaction transaction = null)
        {
            return await _connection.ExecuteAsync(query, parameters, transaction);
        }
    }
}